@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@model ApplicationContext
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

<script>
    let color;
</script>

<div class="row justify-content-md-center">
    <div class="col-md-6">

        @{
            string tableTextColor;
            if (HttpContextAccessor.HttpContext?.Request.Cookies["theme"] == "dark") tableTextColor = "white";
            else tableTextColor = "dark";
            Review data = Model.Reviews.FirstOrDefault(review => review.Id == (int)ViewData["reviewId"]);
            User user = await ViewData.Model.GetUserByIdAsync(data.AuthorId.ToString());
            ViewData.Add("authorName", user.UserName);
            ViewData.Add("likes", user.Likes);
            ViewData.Add("reviewTags", string.Join(' ', ViewData.Model.SelectReviewTags(data.Id)));
            <partial name="../Review/ReviewData" model="data" view-data="ViewData" />
            ViewData.Remove("authorName");
            ViewData.Remove("likes");
            ViewData.Remove("reviewTags");
            if (SignInManager.IsSignedIn(User))
            {
                <script>
                    document.getElementById('likes-@data.Id').innerHTML = '';
                </script>
                if (Model.Likes.FirstOrDefault(like => like.UserId == ViewData["userId"] && like.ReviewId == data.Id) != null)
                {
                    <script>
                        color = "blue";
                    </script>
                }
                else
                {
                    <script>
                        color = "";
                    </script>
                }
                Rate rate = Model.Rates.FirstOrDefault(rate => rate.UserId == ViewData["userId"] && rate.ReviewId == data.Id);
                int userRate = 0;
                if (rate != null)
                {
                    userRate = rate.UserRate;
                }
                <script>
                    document.getElementById('likes-@data.Id').insertAdjacentHTML("afterbegin", '<div style="float: right" id="likes"><p><i class="bi bi-heart" id="heart" onclick="like();"></i>     @TextModel.Context["likes"]<label id="likesCount">@data.Likes</label></p><p></p>@TextModel.Context["your rate"]:<label style="color: yellow" id="yourRate"></label></div>');
                    getUserRate('@userRate.ToString()', 'yourRate');
                    let stars = document.getElementById('yourRate').querySelectorAll("i");
                    stars.forEach((star, i) => {
                        star.onclick = function () { changeRate(i + 1) };
                    })
                    document.getElementById('heart').style.color = color;
                </script>
            }
            <h4>@TextModel.Context["comments"]</h4>
            <table class="table" style="color: @tableTextColor" id="Comments">
                @foreach (var comment in Model.SelectReviewComments(data.Id))
                {
                    <tr>
                        <td style="width: 40%">
                            @comment.UserName  (<i style="color: green">@comment.UserLikes</i>):
                            <p style="color: grey">@comment.Date.ToShortDateString()</p>
                        </td>
                        <td align="left" style="width: 60%">
                            @comment.Context
                        </td>
                    </tr>
                }
            </table>
            <script>
                function updateComments() {
                    setTimeout(function () {
                        $.ajax({
                            url: "/Review/UpdateComments",
                            method: 'GET',
                            dataType: 'html',
                            data: {
                                currentCommentsCount: document.getElementById('Comments').getElementsByTagName('tr').length,
                                reviewId: @data.Id
                                                                                            },
                            success: function (comment) {
                                document.getElementById('Comments').insertAdjacentHTML("beforeend", comment);
                            },
                        });
                        updateComments();
                    }, 5000);
                }

                updateComments();
            </script>
            @if (SignInManager.IsSignedIn(User))
            {
                <table class="table" style="color: @tableTextColor">
                    <tr>
                        <td>
                            <form asp-controller="Review" asp-action="NewComment" class="form-horizontal">
                                <div class="form-floating" style="color:black;">
                                    <input class="form-control" onchange="form.submit();" name="commentContext" />
                                    <label class="form-label">@TextModel.Context["your comment"]</label>
                                </div>
                            </form>
                        </td>
                    </tr>
                </table>
            }
        }
    </div>
    @{
        List<Review> sameReviews = Model.Reviews.Where(review => review.CreationName == data.CreationName && review.Id != data.Id).ToList();
        if (sameReviews.Count != 0)
        {
            <h3>@TextModel.Context["same reviews"]</h3>
            <form asp-controller="Review" asp-action="ReviewPage" class="form-horizontal">
                <table class="table" style="border-style: solid; border-color: red; color: @tableTextColor; ">
                    @foreach (var review in sameReviews)
                    {
                        <tr>
                            <td><button type="submit" class="btn btn-primary" name="review" value="@review.Id"><i class="bi bi-eyeglasses"></i> @TextModel.Context["watch"]</button></td>
                            <td id="@review.Id" align="left" style="width: 80%">
                                @{
                                    user = await ViewData.Model.GetUserByIdAsync(review.AuthorId.ToString());
                                    ViewData.Add("authorName", user.UserName);
                                    ViewData.Add("likes", user.Likes);
                                    ViewData.Add("reviewTags", string.Join(' ', ViewData.Model.SelectReviewTags(review.Id)));
                                    <partial name="../Review/ReviewData" model="review" view-data="ViewData" />
                                    ViewData.Remove("authorName");
                                    ViewData.Remove("likes");
                                    ViewData.Remove("reviewTags");
                                }
                            </td>
                        </tr>
                    }
                </table>
            </form>
        }
    }
</div>